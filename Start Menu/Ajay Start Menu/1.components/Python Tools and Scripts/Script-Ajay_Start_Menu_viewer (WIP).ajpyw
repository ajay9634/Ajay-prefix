import os
import tkinter as tk
from tkinter import ttk, messagebox

PROGRAMDATA_PATH = os.path.expanduser("C:/ProgramData/Microsoft/Windows/Start Menu")
TARGET_FOLDER_NAME = "Ajay Start Menu"

FONT_NAME = "Segoe UI"
MIN_FONT_SIZE = 9
MAX_FONT_SIZE = 25

# Global state
tree = None
current_font_size = 13
tree_container = None
scrollbar_style_created = False

def find_target_folder():
    try:
        if not os.path.exists(PROGRAMDATA_PATH):
            return None
        for entry in os.listdir(PROGRAMDATA_PATH):
            entry_path = os.path.join(PROGRAMDATA_PATH, entry)
            if os.path.isdir(entry_path) and entry.strip().lower() == TARGET_FOLDER_NAME.lower():
                return entry_path
    except Exception as e:
        print("Error during folder search:", e)
    return None

def insert_tree(target_path):
    global tree
    tree.delete(*tree.get_children())

    def add_items(parent, path):
        try:
            items = sorted(os.listdir(path), key=lambda x: x.lower())
            folders = [name for name in items if os.path.isdir(os.path.join(path, name))]
            files = [name for name in items if os.path.isfile(os.path.join(path, name))]

            for name in folders:
                full = os.path.join(path, name)
                node = tree.insert(parent, "end", text=name, values=[full], tags=("folder",))
                add_items(node, full)

            for name in files:
                full = os.path.join(path, name)
                tree.insert(parent, "end", text=name, values=[full], tags=("file",))
        except Exception as e:
            print("Error reading tree:", e)

    root_node = tree.insert("", "end", text=TARGET_FOLDER_NAME, open=True, values=[target_path], tags=("folder",))
    add_items(root_node, target_path)

def on_double_click(event):
    item = tree.focus()
    if not item:
        return
    filepath = tree.item(item, "values")
    if filepath:
        path = filepath[0]
        if os.path.isfile(path):
            try:
                os.startfile(path)
            except Exception as e:
                messagebox.showerror("Error", f"Could not open:\n{path}\n\n{e}")

def style_treeview(font_size):
    global scrollbar_style_created
    style = ttk.Style()
    style.theme_use("default")

    style.configure("Treeview",
        background="#1e1e2f",
        foreground="#ffffff",
        fieldbackground="#1e1e2f",
        rowheight=int(font_size * 2.2),
        font=(FONT_NAME, font_size))

    style.configure("Treeview.Heading",
        background="#303040",
        foreground="#ffffff",
        font=(FONT_NAME, font_size, "bold"))

    style.map("Treeview",
        background=[("selected", "#3b82f6")],
        foreground=[("selected", "white")])

    # Only create once
    if not scrollbar_style_created:
        style.element_create("Custom.Vertical.Scrollbar.trough", "from", "clam")
        style.layout("Custom.Vertical.TScrollbar",
            [('Vertical.Scrollbar.trough',
              {'children': [('Vertical.Scrollbar.uparrow', {'side': 'top'}),
                            ('Vertical.Scrollbar.downarrow', {'side': 'bottom'}),
                            ('Vertical.Scrollbar.thumb', {'unit': '1', 'children': [
                                ('Vertical.Scrollbar.grip', {'sticky': ''})
                            ], 'sticky': 'nswe'})],
               'sticky': 'ns'})])
        style.configure("Custom.Vertical.TScrollbar",
            troughcolor="#1e1e2f",
            background="#3b82f6",
            arrowcolor="#ffffff",
            bordercolor="#2b2b2b",
            relief="flat")
        scrollbar_style_created = True

def rebuild_tree(font_size):
    global tree, tree_container, current_font_size
    current_font_size = font_size

    # Clear container
    for widget in tree_container.winfo_children():
        widget.destroy()

    yscroll = ttk.Scrollbar(tree_container, orient="vertical", style="Custom.Vertical.TScrollbar")
    yscroll.pack(side="right", fill="y")

    xscroll = ttk.Scrollbar(tree_container, orient="horizontal")
    xscroll.pack(side="bottom", fill="x")

    tree_widget = ttk.Treeview(tree_container, yscrollcommand=yscroll.set, xscrollcommand=xscroll.set)
    tree_widget.pack(side="left", fill="both", expand=True)

    yscroll.config(command=tree_widget.yview)
    xscroll.config(command=tree_widget.xview)

    # Tag styles
    tree_widget.tag_configure("folder", font=(FONT_NAME, font_size, "bold"), foreground="#90caf9")
    tree_widget.tag_configure("file", font=(FONT_NAME, font_size), foreground="#eeeeee")
    tree_widget.bind("<Double-1>", on_double_click)

    style_treeview(font_size)

    globals()['tree'] = tree_widget

    target_path = find_target_folder()
    if target_path:
        insert_tree(target_path)
    else:
        tree.insert("", "end", text="Folder not found", tags=("file",))

def create_viewer():
    global tree_container

    root = tk.Tk()
    root.title("Ajay Start Menu Viewer")
    root.geometry("800x560")
    root.configure(bg="#2b2b2b")

    # Zoom/Font control
    control_frame = tk.Frame(root, bg="#2b2b2b")
    control_frame.pack(fill="x", padx=8, pady=6)

    tk.Label(control_frame, text="Font Size:", fg="white", bg="#2b2b2b").pack(side="left")

    font_var = tk.IntVar(value=current_font_size)

    def on_scale_change(val):
        rebuild_tree(int(float(val)))

    scale = tk.Scale(control_frame, from_=MIN_FONT_SIZE, to=MAX_FONT_SIZE,
                     orient="horizontal", variable=font_var,
                     command=on_scale_change, bg="#2b2b2b", fg="white",
                     troughcolor="#444", highlightthickness=0,
                     length=200)
    scale.pack(side="left", padx=10)

    # Tree container
    tree_container = tk.Frame(root, bg="#2b2b2b")
    tree_container.pack(fill="both", expand=True, padx=6, pady=(0, 6))

    rebuild_tree(current_font_size)

    root.mainloop()

if __name__ == "__main__":
    create_viewer()